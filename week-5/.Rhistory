setwd("D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5")
rm(list = ls())
library(pracma)
library("pracma")
install.packages(pracma)
install.packages("pracma")
library("pracma")
p <- polyfit(x[1:2], y[1:2], 1); p
x <- 0:3
y <- x^2+3*x+2
p <- polyfit(x[1:2], y[1:2], 1)
p <- polyfit(x[1:2], y[1:2], 1); p
polyval(p, 1/2)
polyval(p, 1/2) - y[1]
fy <- function(x) {
x^2+3*x+2
}
fy(0.5)
fy - polyval(p, 1/2)
fy(0.5) - polyval(p, 1/2)
x <- 0:3
y <- x^2+3*x+2
library("pracma")
error <- NULL
error <- NULL
for (i in 0:2) {
p <- polyfit(x[i+1:i+2], y[i+1:i+2], 1)
error[i+1] <- fy(i+0.5) - polyval(p, i+0.5)
}
pvalue <- polyval(p, i+0.5)
fy <- function(x) {
x^2+3*x+2
}
error <- NULL
for (i in 0:2) {
p <- polyfit(x[i+1:i+2], y[i+1:i+2], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
}
error
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%d y(true)=%.3f y(approx)=%.3f error=%.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%f y(true)=%.3f y(approx)=%.3f error=%.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%.3f y(approx)=%.3f error=%.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%2.3f y(true)=%2.3f y(approx)=%2.3f error=%2.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%.3f y(approx)=%.3f error=%.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%6.3f y(approx)=%.3f error=%.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%6.3f y(approx)=%.3f error=%6.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%6.3f y(approx)=%6.3f error=%6.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%8.3f y(approx)=%6.3f error=%6.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%6.3f y(approx)=%6.3f error=%6.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
x <- c(0, pi/2, pi)
y <- c(0, 1, 0)
df <- c(y[2]-y[1], y[3]-y[2])
x <- c(0, pi/2, pi)
f <- c(0, 1, 0)
df <- c(f[2]-f[1], f[3]-f[2])
d2f <- c(df[2]-df[1])
cat("x      f      df       d2f")
cat("==========================")
cat("x      f      df       d2f", "\n")
cat("==========================", "\n")
cat(sprintf("%8.3f %8.3f %8.3f %8.3f", x[1], f[1], df[1], d2f[1]), "\n")
cat(sprintf("%8.3f %8.3f %8.3f %8.3f", x[2], f[2], df[2], d2f[2]), "\n")
cat(sprintf("%8.3f %8.3f %8.3f %8.3f", x[2], f[2], df[2], NULL), "\n")
cat(sprintf("%8.3f %8.3f %8.3f %8.3f", x[1], f[1], df[1], d2f[1]), "\n")
cat(sprintf("%8.3f %8.3f %8.3f %8.3f", x[2], f[2], df[2]), "\n")
cat(sprintf("%8.3f %8.3f %8.3f %8.3f", x[1], f[1], df[1], d2f[1]), "\n")
cat(sprintf("%8.3f %8.3f %8.3f", x[2], f[2], df[2]), "\n")
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-1.R')
PTS2_assignment5_BMI_data <- read.table("D:/UvA/Year 1/Block 5/Probability Theory and Statistics 2/Week 5/PTS2_assignment5_BMI_data.csv", quote="\"", comment.char="")
View(PTS2_assignment5_BMI_data)
View(PTS2_assignment5_BMI_data)
cat("x      f      df       d2f", "\n")
cat("==========================", "\n")
cat(sprintf("%9.6f %8.6f %8.6f %8.6f", x[1], f[1], df[1], d2f[1]), "\n")
cat(sprintf("%9.6f %8.6f %8.6f", x[2], f[2], df[2]), "\n")
cat(sprintf("%8.6f %8.6f", x[3], f[3]), "\n")
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-1.R')
cat(sprintf("%8.6f %8.6f", x[3], f[3]), "\n")
polyfit(x[1:3], y[1:3], 2)
polyfit(x[1:3], y[1:3], 2)
x <- c(-pi/2, 0, pi/2, pi)
x <- c(-pi/2, 0, pi/2, pi)
y <- c(-1,0,1,0)
polyfit(x[1:4], y[1:4], 3)
?polyfit
x <- c(-pi/2, 0, pi/2, pi)
y <- c(-1,0,1,0)
polyfit(x[1:4], y[1:4], 3)
polyfit(x[1:3], y[1:3], 3)
polyfit(x[1:4], y[1:4], 3)
?polyfit
p <- polyfit(x[1:4], y[1:4], 3)
y1 <- polyval(p,x)
lines(x, y1)
plot(x,y)
lines(x, y1)
lines(x, y1, col = "red")
plot(x,y1)
plot(x,y1)
lines(x, y1, col = "red")
plot(x,y)
lines(x, y1, col = "red")
?cubicspline
x <- c(-pi, -pi/2, 0, pi/2, pi)
y <- c(0, -1, 0, 1, 0)
xs <- seq(-pi, pi, by = pi/20)
pp <- cubicspline(x, y)
y1 <- ppval(pp, xs)
plot(x, y)
lines(x, y1)
plot(x, y)
lines(y1)
plot(x, y)
lines(spline(x,y))
x <- c(-pi, -pi/2, 0, pi/2, pi)
y <- c(0, -1, 0, 1, 0)
plot(x, y)
lines(spline(x,y))
plot(x, y, xlim=c(-1.5, 1.5), ylim = c(-4,4))
lines(spline(x,y))
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(spline(x,y), col="blue")
lines(spline(x,y1), col="blue")
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(spline(x,y1), col="blue")
lines(spline(x,y), col="blue")
#5
?spline
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(cubicspline(x,y), col="blue")
lines(spline(x,y), col="blue")
diff(f)
#OR
df <- diff(f)
p <- polyfit(x, y, 3)
y1 <- polyval(p,x)
plot(x,y)
lines(x, y1, col = "red")
#5
data <- read.table(file = "YX.txt",header=TRUE)
View(data)
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(spline(x,y), col="blue")
y1 <- ppval(pp, xs)
plot(y1)
plot(y)
lines(y1)
lines(xs, y1)
plot(y)
lines(xs,y1)
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(spline(x,y), col="blue")
pp <- cubicspline(x, y)
y1 <- ppval(pp, xs)
plot(y)
lines(xs,y1)
lines(y1)
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(y1)
lines(y1)
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(spline(x,y), col="blue")
plot(y)
lines(y1)
lines(y1)
plot(y)
lines(y1)
y1 <- ppval(pp, xs)
plot(y)
lines(y1)
plot(y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(y1)
x<-c(-pi, -pi/2, 0, pi/2, pi)
y<-c(0, -1, 0, 1, 0)
plot(cubicspline(x, y, xi = NULL, endp2nd = FALSE, der = c(0, 0)))
cubicspline(x, y, xi = NULL, endp2nd = FALSE, der = c(0, 0))
a <- cubicspline(x, y, xi = NULL, endp2nd = FALSE, der = c(0, 0))
xs <- seq(-pi, pi, by = pi/20)
y1 <- ppval(a, xs)
y1
setwd("D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5")
rm(list = ls())
setwd("D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5")
rm(list = ls())
rm(list = ls()) # clear memory
cat("\f")       # clear screen
primitive_1a <- function(x){
return((x^4)/4 - x^2/2 +x)
}
library(pracma)
a <- 0         # lower integral limit
b <- 1         # upper integral limit
N <- 2         # number of subintervals
h <- (b-a)/N   # width of the subiterval
x <- seq(a,b,h)
f <- x^3-x+1
area_exact  <- rep(0,N)
area_approx <- rep(0,N)
error       <- rep(0,N)
fx <- function(x) {
return(x^3-x+1)
}
trapezoid <- function(f,a,b) {
h <- b-a
return(h/2 * (f(a) + f(b)))
}
trapezoid(fx, 0, 1)
cat(sprintf('                      Area           Area\n'))
cat(sprintf('                      Area           Area\n'))
cat(sprintf('Interval:             Exact:         Approximation:     Error:\n'))
cat(sprintf('==============================================================\n'))
for(i in 1:N){
area_exact[i] <- abs(primitive_1a(x[i+1]) - primitive_1a(x[i]))          # calculate the exact area using primitive_1a
area_approx[i] <- h/2 * (f[i] + f[i+1])     # % calculate the approximate area using the Trapezium
error[i] <- area_exact[i]-area_approx[i]
cat(sprintf('(%d): (%5.2f,%.2f)   %12.8f   %12.8f   %12.8f\n',
i,a+(i-1)*h,a+i*h,area_exact[i],area_approx[i],error[i]))
}
cat(sprintf('==============================================================\n'))
cat(sprintf('Total:              %12.8f   %12.8f   %12.8f\n',sum(area_exact),sum(area_approx),sum(error)))
no_obs <- length(x)        # total number of x-values = N+1
w <- rep(1,no_obs)
# set interior weights to 2
area_approx2 <- h/2*sum(w*f)
cat(sprintf('Check: h/2*sum(w*f)=%.8f\n',area_approx2))
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
N <- 4         # number of subintervals
h <- (b-a)/N   # width of the subiterval
x <- seq(a,b,h)
f <- x^3-x+1
area_exact  <- rep(0,N)
area_approx <- rep(0,N)
error       <- rep(0,N)
cat(sprintf('                      Area           Area\n'))
cat(sprintf('Interval:             Exact:         Approximation:     Error:\n'))
cat(sprintf('==============================================================\n'))
for(i in 1:N){
area_exact[i] <- abs(primitive_1a(x[i+1]) - primitive_1a(x[i]))          # calculate the exact area using primitive_1a
area_approx[i] <- h/2 * (f[i] + f[i+1])     # % calculate the approximate area using the Trapezium
error[i] <- area_exact[i]-area_approx[i]
cat(sprintf('(%d): (%5.2f,%.2f)   %12.8f   %12.8f   %12.8f\n',
i,a+(i-1)*h,a+i*h,area_exact[i],area_approx[i],error[i]))
}
cat(sprintf('==============================================================\n'))
cat(sprintf('Total:              %12.8f   %12.8f   %12.8f\n',sum(area_exact),sum(area_approx),sum(error)))
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
f <- exp(-1/2 * x^2)
area_exact  <- rep(0,N)
area_approx <- rep(0,N)
error       <- rep(0,N)
primitive_1b <- function(x){
return(sqrt(2*pi) * pnorm(x))
}
a <- 1         # lower integral limit
b <- 2         # upper integral limit
N <- 2         # number of subintervals
h <- (b-a)/N   # width of the subiterval
x <- seq(a,b,h)
f <- exp(-1/2 * x^2)
area_exact  <- rep(0,N)
area_approx <- rep(0,N)
error       <- rep(0,N)
cat(sprintf('                      Area           Area\n'))
cat(sprintf('Interval:             Exact:         Approximation:     Error:\n'))
for(i in 1:N){
area_exact[i] <- abs(primitive_1b(x[i+1]) - primitive_1b(x[i]))          # calculate the exact area using primitive_1a
area_approx[i] <- h/2 * (f[i] + f[i+1])     # % calculate the approximate area using the Trapezium
error[i] <- area_exact[i]-area_approx[i]
cat(sprintf('(%d): (%5.2f,%.2f)   %12.8f   %12.8f   %12.8f\n',
i,a+(i-1)*h,a+i*h,area_exact[i],area_approx[i],error[i]))
}
cat(sprintf('==============================================================\n'))
cat(sprintf('Total:              %12.8f   %12.8f   %12.8f\n',sum(area_exact),sum(area_approx),sum(error)))
no_obs <- length(x)        # total number of x-values = N+1
w <- rep(1,no_obs)
# set interior weights to 2
area_approx2 <- h/2*sum(w*f)
cat(sprintf('Check: h/2*sum(w*f)=%.8f\n',area_approx2))
w <- rep(1,no_obs)
# set interior weights to 2
area_approx2 <- h/2*sum(w*f)
cat(sprintf('Check: h/2*sum(w*f)=%.8f\n',area_approx2))
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
library(pracma)
a <- 0         # lower integral limit
b <- 1         # upper integral limit
N <- 2         # number of subintervals
h <- (b-a)/N   # width of the subiterval
x <- seq(a,b,h)
f <- x^3-x+1
area_exact  <- rep(0,N)
area_approx <- rep(0,N)
error       <- rep(0,N)
cat(sprintf('                      Area           Area\n'))
cat(sprintf('Interval:             Exact:         Approximation:     Error:\n'))
cat(sprintf('==============================================================\n'))
for(i in 1:N){
area_exact[i] <- abs(primitive_1a(x[i+1]) - primitive_1a(x[i]))          # calculate the exact area using primitive_1a
area_approx[i] <- h/2 * (f[i] + f[i+1])     # % calculate the approximate area using the Trapezium
error[i] <- area_exact[i]-area_approx[i]
cat(sprintf('(%d): (%5.2f,%.2f)   %12.8f   %12.8f   %12.8f\n',
i,a+(i-1)*h,a+i*h,area_exact[i],area_approx[i],error[i]))
}
cat(sprintf('==============================================================\n'))
cat(sprintf('Total:              %12.8f   %12.8f   %12.8f\n',sum(area_exact),sum(area_approx),sum(error)))
no_obs <- length(x)        # total number of x-values = N+1
w <- rep(1,no_obs)
# set interior weights to 2
area_approx2 <- h/2*sum(w*f)
cat(sprintf('Check: h/2*sum(w*f)=%.8f\n',area_approx2))
rm(list = ls()) # clear memory
cat("\f")       # clear screen
library(pracma)
x2 <- seq(0,pi,length=1000)
f2 <- sin(5*x2)
par(cex=1.5)
plot(x2,f2,type="l",lwd=2,col="DarkBlue",xlab="x",ylab="f")
M <- 1
NoPoints_x <- 2*M+1
x <- seq(0,pi,pi/(NoPoints_x-1))
f <- sin(5*x)
Lagr <- rep(1,1000)
LagrIntervalWidth <- 1000/M
for(i in 1:M){
index_low <- 2*(i-1)+1        # for i=1,...,3: 1,3,6
index_high <- 2*i+1           # for i=1,...,3: 3,5,8
coef <- polyfit(x[index_low:index_high],f[index_low:index_high],2)
index_low_x2 <- floor((i-1)*LagrIntervalWidth)+1
index_high_x2 <- floor(i*LagrIntervalWidth)
Lagr[index_low_x2:index_high_x2] <- polyval(coef,x2[index_low_x2:index_high_x2])
}
points(x,f,col="Red",lwd=2)
lines(x2,Lagr,type="l",col="Red",lwd=2)
?par
M <- 3
x <- seq(0, pi/3, by = pi/3 * 1/(M-1))
f <- sin(5x)
f <- sin(5*x)
polyfit(x, f, n=3)
polyfit(x, f, n=2)
a <- polyfit(x, f, n=2)
a
res <- polyfit(x, f, n=2)
a <- res[1]; b <- res[2]; c <- res[3]
library(Ryacas)
install.packages("Ryacas")
library(Ryacas)
t <- ysym("t")
int.exact <- integrate(a*t^2+b*t+c,t,0,pi/3)
eval(as_r(int.exact))
M <- 8
rm(list = ls()) # clear memory
cat("\f")       # clear screen
library(pracma)
x2 <- seq(0,pi,length=1000)
f2 <- sin(5*x2)
par(cex=1.5)
plot(x2,f2,type="l",lwd=2,col="DarkBlue",xlab="x",ylab="f")
M <- 8
NoPoints_x <- 2*M+1
x <- seq(0,pi,pi/(NoPoints_x-1))
f <- sin(5*x)
Lagr <- rep(1,1000)
LagrIntervalWidth <- 1000/M
for(i in 1:M){
index_low <- 2*(i-1)+1        # for i=1,...,3: 1,3,6
index_high <- 2*i+1           # for i=1,...,3: 3,5,8
coef <- polyfit(x[index_low:index_high],f[index_low:index_high],2)
index_low_x2 <- floor((i-1)*LagrIntervalWidth)+1
index_high_x2 <- floor(i*LagrIntervalWidth)
Lagr[index_low_x2:index_high_x2] <- polyval(coef,x2[index_low_x2:index_high_x2])
}
points(x,f,col="Red",lwd=2)
lines(x2,Lagr,type="l",col="Red",lwd=2)
M <- 3
(pi/12)*(f[1] + 4*f[2] + f[3])
eval(as_r(int.exact))
t <- ysym("t")
int.exact <- integrate(a*t^2+b*t+c,t,0,pi/3)
eval(as_r(int.exact))
t <- ysym("t")
int.exact <- integrate(a*t^2+b*t+c,t,0,pi/3)
M <- 3
x <- seq(0, pi/3, by = pi/3 * 1/(M-1))
f <- sin(5*x)
res <- polyfit(x, f, n=2)
a <- res[1]; b <- res[2]; c <- res[3]
t <- ysym("t")
int.exact <- integrate(a*t^2+b*t+c,t,0,pi/3)
eval(as_r(int.exact))
(pi/12)*(f[1] + 4*f[2] + f[3])
primitive_2 <- function(x){
return(-cos(5*x)/5)
}
N <- M-1
primitive_2 <- function(x){
return(-cos(5*x)/5)
}
x <- seq(0, pi/3, by = pi/3 * 1/(M-1))
f <- sin(5*x)
N <- M-1
h <- (b-a)/(Points-1)
x <- seq(a,b,h)
f <- sin(5*x)
area_exact  <- rep(0,N)
area_approx <- rep(0,N)
area_exact  <- rep(0,M)
area_approx <- rep(0,M)
error       <- rep(0,M)
index <- 2*(i-1)+1
primitive_2 <- function(x){
return(-cos(5*x)/5)
}
a <- 0
b <- pi
M <- 3
Points <- 2*M + 1
h <- (b-a)/(Points-1)
x <- seq(a,b,h)
f <- sin(5*x)
area_exact  <- rep(0,M)
area_approx <- rep(0,M)
error       <- rep(0,M)
cat(sprintf('                      Area           Area\n'))
cat(sprintf('Interval:             Exact:         Approximation:     Error:\n'))
cat(sprintf('==============================================================\n'))
for(i in 1:M){
index <- 2*(i-1)+1
area_exact[i] <- abs(primitive_2(x[index+2]) - primitive_2(x[index]))
area_approx[i] <- h/3 * (f[index] + 4*f[index+1] + f[index+2])
error[i] <- area_exact[i]-area_approx[i]
cat(sprintf('(%d): (%5.2f,%.2f)   %12.8f   %12.8f   %12.8f\n',
i,a+(i-1)*h,a+i*h,area_exact[i],area_approx[i],error[i]))
}
cat(sprintf('==============================================================\n'))
cat(sprintf('Total:              %12.8f   %12.8f   %12.8f\n',sum(area_exact),sum(area_approx),sum(error)))
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/week-5-pc-lab-2.R')
source('D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5/PC5b_Q2_fig.R')
library("spuRs")
Phi(z)

}
x0 <- 0:3
x0 <- (-3:3)
root <- rep(NA, length(x0))
?newtonraphson
dfx <- function(x) {
D(expression((x^3-x)*sin(x)), "x")
}
dfx(3)
dfx(3)
uniroot.all(dfx, c(-4,4))
newtonraphson(f, x0)
for (i in 1:length(x0)) {
root[i] <- newtonraphson(f, x0[i])
}
length(x0)
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i])
}
for (i in 1:7) {
root[i] <- newtonraphson(f, x[i])
}
x0 <- (-3:3)
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i])
}
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i])
}
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i], tol=1e-9, max.iter = 100)
}
for (i in 1:7) {
root[i] <- newtonraphson(fNR, x0[i], tol=1e-9, max.iter = 100)
}
fNR <- function(x) {
return(c(f(x), dfx(x)))
}
for (i in 1:7) {
root[i] <- newtonraphson(fNR, x0[i], tol=1e-9, max.iter = 100)
}
f <- function(x) {
(x^3-x)*sin(x)
}
D(expression((x^3-x)*sin(x)), "x")
dfx <- function(x) {
(3 * x^2 - 1) * sin(x) + (x^3 - x) * cos(x)
}
fNR <- function(x) {
return(c(f(x), dfx(x)))
}
for (i in 1:7) {
root[i] <- newtonraphson(fNR, x0[i], tol=1e-9, max.iter = 100)
}
root
for (i in 1:7) {
cat(sprintf("x0=%d: Root=%.5f found", x0[i], root[i]))
}
for (i in 1:7) {
cat(sprintf("x0=%d: Root=%.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%3d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%2d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%3d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
x<-0:3
Taylor <- function(x, n) {
taylor <- 0
for (i in 0:n) {
taylor <- taylor + (-1)^i * (x^(2*i)/factorial(2*i))
}
return(taylor)
}
cat("x:"); cat(sprintf("%7.8f", 0:3))
cat("cos(x):") ; cat(sprintf("%7.8f %7.8f %7.8f %7.8f", cos(0), cos(1), cos(2), cos(3)))
cat("N=1:"); cat(sprintf("%7.8f %7.8f %7.8f %7.8f", Taylor(0,1), Taylor(1,1), Taylor(2,1), Taylor(3,1)))
cat("N=2:"); cat(sprintf("%7.8f %7.8f %7.8f %7.8f", Taylor(0,2), Taylor(1,2), Taylor(2,2), Taylor(3,2)))
cat("N=3:"); cat(sprintf("%7.8f %7.8f %7.8f %7.8f", Taylor(0,3), Taylor(1,3), Taylor(2,3), Taylor(3,3)))
?roots
??roots
#rm(list = ls()) # clear memory
#cat("\f")       # clear screen
library(pracma)
rm(list = ls())
cat("\f")
library(pracma)
f <- function(x){
(x-1)*(x-3/2)*(x-2)
}
xm3 <- 1.9      # initialise the three x-variables
xm2 <- 1.8
xm1 <- 1.7
iter <- 0
?roots
rm(list = ls())
f <- function(x) {
return(x/(1+x^2))
}
g <- function(x) {
return(tan(x))
}
x <- seq(-pi/2,pi/2, length.out = 100)
r1 <- f(g(x))
r2 <- g(f(x))
library(ggplot2)
ggplot() +
geom_line(mapping = aes(x=x, y=r1), col="blue", linetype=2) +
geom_line(mapping = aes(x=x,y=r2), col="red", linetype=3) +
ylab("")
#3
x <- seq(-4,4,by=0.05)
plot(x, cos(x), type = "l")
for (i in 1:3) {
a <- Taylor(x, i)
lines(x=x, y=a, col=i+1, lty=i+1)
}
Taylor <- function(x, n) {
taylor <- 0
for (i in 0:n) {
taylor <- taylor + (-1)^i * (x^(2*i)/factorial(2*i))
}
return(taylor)
}
for (i in 1:3) {
a <- Taylor(x, i)
lines(x=x, y=a, col=i+1, lty=i+1)
}
legend(2.7,1, legend=c("n=1", "n=2","n=3"),lty=c(2,3,4), col=c(2,3,4))
Sum <- function(p) {
sum <- 0
for (j in 1:(p+1)) {
sum <- sum + j^p
}
return(sum)
}
for (i in 1:4) {
cat(sprintf("Sum for p = %d is %d", i, Sum(i))); cat("\n")
}
for (i in 1:4) {
sum <- 0
for (j in 1:(i+1)) {
sum <- sum + j^i
}
cat(sprintf("Sum for p = %d is %d", i, sum)); cat("\n")
}
abline(h=-1)
setwd("D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 4")
rm(list = ls())
install.packages("spuRs")
library(spuRs)
#1
g1 <- function(x) {
acos(1/2*sin(x))
}
g2 <- function(x) {
asin(2*cos(x))
}
D(expression(acos(1/2*sin(x))), "x")
dg1x<-function(x){
-(1/2 * cos(x)/sqrt(1 - (1/2 * sin(x))^2))
}
D(expression(asin(2*cos(x))), "x")
dg2x <- function(x){
-(2 * sin(x)/sqrt(1 - (2 * cos(x))^2))
}
x<-seq(-2*pi,2*pi,length=1e3)
plot(x=x, y=dg1x(x), ylim = c(-10,10))
lines(x=x, y=dg2x(x))
abline(h=-1)
abline(h=1)
plot(x=x, y=g1(x), xlim = c(-6,6), ylim = c(-6,6))
lines(x=x, y=x)
plot(x=x, y=g1(x), xlim = c(1,1.2), ylim = c(1,1.2))
lines(x=x, y=x)
?fixedpoint
g1 <- function(x) {
acos(1/2*sin(x))
}
fixedpoint(g1, x0=-5)
#b
library(spuRs)
plot(type="l",x,y=g1(x),xlim = c(1,1.2),ylim = c(1,1.2))
abline(a=0,b=1,col=4,lwd=3)
#2
?bisection
bisection(g1,0,1)
ftn5 <- function(x) return(log(x)-exp(-x))
bisection(ftn5, 1, 2, tol = 1e-6)
plot(ftn5(x))
#3
#a
f <- function(x) {
(x^3-x)*sin(x)
}
D(expression((x^3-x)*sin(x)), "x")
dfx <- function(x) {
(3 * x^2 - 1) * sin(x) + (x^3 - x) * cos(x)
}
fNR <- function(x) {
return(c(f(x), dfx(x)))
}
x0 <- (-3:3)
root <- rep(NA, length(x0))
?newtonraphson
length(x0)
newtonraphson(f, x0)
for (i in 1:7) {
root[i] <- newtonraphson(fNR, x0[i], tol=1e-9, max.iter = 100)
}
root
for (i in 1:7) {
cat(sprintf("x0=%3d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
plot(x=x, y=dg1x(x), ylim = c(-10,10))
lines(x=x, y=dg2x(x))
abline(h=-1)
abline(h=1)
D(expression(asin(2*cos(x))), "x")
x=seq(-2*pi,2*pi,length=1e3)
plot(x,dg1x(x),type="l",col="blue",lwd=2,ylim=c(-1,1))
abline(0,0); abline(-1,0,lty=2); abline(+1,0,lty=2)
plot(x=x, y=dg1x(x), ylim = c(-10,10))
plot(x,dg2x(x),type="l",col="blue",lwd=2,ylim=c(-10,10))
lines(x=x, y=dg2x(x))
abline(h=-1)
abline(h=1)
abline(0,0)
abline(h=-1, lty=2)
plot(x,dg2x(x),type="l",col="blue",lwd=2,ylim=c(-10,10))
abline(h=-1, lty=2)
abline(h=1, lty=2)
abline(0,0)
plot(type="l",x,y=g1(x),xlim = c(1,1.2),ylim = c(1,1.2))
abline(a=0,b=1,col=4,lwd=3)
plot(type="l",x,y=g1(x),ylim = c(-6,6))
abline(a=0,b=1,col=4,lwd=3)
grid()
bisection(g1,0,1)
ftn5 <- function(x) return(log(x)-exp(-x))
bisection(ftn5, 1, 2, tol = 1e-6)
ftn5 <- function(x) return(log(x)-exp(-x))
bisection(ftn5, 1, 2, tol = 1e-6)
plot(ftn5(x))
f<-function(x){
2*cos(x)-sin(x)
}
bisection(f,-2.5,-1.5,1e-4)
?secant
library(spuRs)
?secant
x <- 1.1
int <- trunc(x) # integer part before the decimal
frac <- x-int # fractional part after the decimal
if(int>0) {
str <- ""
for(i in trunc(log(int,2)):0){ # trunc(log(int,2) is the largerst power of 2
dec <- 2^i
if(dec<=x){
x <- x-dec
str <- paste(str,"1",sep="")
} else str <- paste(str,"0",sep="")
}
} else str <- "0"
str <- paste(str,".",sep="")
for(i in 1:30){
dec <- 2^(-i)
if(dec<=frac){
frac <- frac-dec
str <- paste(str,"1",sep="")
} else str <- paste(str,"0",sep="")
}
cat(paste(str))
rm(list = ls())
#1
x <- 0:3
y <- x^2+3*x+2
library("pracma")
p <- polyfit(x[1:2], y[1:2], 1); p
polyval(p, 1/2)
fy <- function(x) {
x^2+3*x+2
}
error <- NULL
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
for (i in 0:2) {
p <- polyfit(x[(i+1):(i+2)], y[(i+1):(i+2)], 1)
pvalue <- polyval(p, i+0.5)
error[i+1] <- fy(i+0.5) - pvalue
cat(sprintf("x=%.3f y(true)=%6.3f y(approx)=%6.3f error=%6.3f", i+0.5, fy(i+0.5), pvalue, error[i+1])); cat("\n")
}
x <- c(0, pi/2, pi)
f <- c(0, 1, 0)
df <- c(f[2]-f[1], f[3]-f[2])
d2f <- c(df[2]-df[1])
cat("x      f      df       d2f", "\n")
cat("==========================", "\n")
cat(sprintf("%9.6f %8.6f %8.6f %8.6f", x[1], f[1], df[1], d2f[1]), "\n")
cat(sprintf("%9.6f %8.6f %8.6f", x[2], f[2], df[2]), "\n")
cat(sprintf("%8.6f %8.6f", x[3], f[3]), "\n")
polyfit(x[1:3], y[1:3], 2)
x <- c(-pi, -pi/2, 0, pi/2, pi)
y <- c(0, -1, 0, 1, 0)
xs <- seq(-pi, pi, by = pi/20)
pp <- cubicspline(x, y)
y1 <- ppval(pp, xs)
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(y1)
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(spline(x,y), col="blue")
x<-c(-pi, -pi/2, 0, pi/2, pi)
y<-c(0, -1, 0, 1, 0)
plot(cubicspline(x, y, xi = NULL, endp2nd = FALSE, der = c(0, 0)))
a <- cubicspline(x, y, xi = NULL, endp2nd = FALSE, der = c(0, 0))
y1 <- ppval(a, xs)
y1
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(y1)
plot(x, y, ylim=c(-1.5, 1.5), xlim = c(-4,4))
lines(spline(x,y), col="blue")
x<-c(-pi, -pi/2, 0, pi/2, pi)
y<-c(0, -1, 0, 1, 0)
plot(cubicspline(x, y, xi = NULL, endp2nd = FALSE, der = c(0, 0)))
a <- cubicspline(x, y, xi = NULL, endp2nd = FALSE, der = c(0, 0))
y1 <- ppval(a, xs)
y1
#5
data <- read.table(file = "YX.txt",header=TRUE)
View(data)
setwd("D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 5")
#5
data <- read.table(file = "YX.txt",header=TRUE)
View(data)
View(data); attach(data)
SSR <- function(coef, y, x) {
fit <- coef[1]*sin(x)+coef[2]*cos(x)
residuals <- y-fit
return(sum(residuals^2))
}
results <- optim(c(0,0),SSR,gr=NULL,y,x,method = c("BFGS"))
coef <- results$par
cat(sprintf("a=%10.4f b=%10.4f\n",coef[1],coef[2]))
SSR <- function(coef, y, x) {
fit <- coef[1]*sin(x)+coef[2]*cos(x)
residuals <- y-fit
return(sum(residuals^2))
}
results <- optim(c(0,0),SSR,gr=NULL,y,x,method = c("BFGS"))
coef <- results$par
cat(sprintf("a=%10.4f b=%10.4f\n",coef[1],coef[2]))
data <- read.table(file = "YX.txt",header=TRUE)
View(data); attach(data)
SSR <- function(coef, y, x) {
fit <- coef[1]*sin(x)+coef[2]*cos(x)
residuals <- y-fit
return(sum(residuals^2))
}
results <- optim(c(0,0),SSR,gr=NULL,y,x,method = c("BFGS"))
coef <- results$par
cat(sprintf("a=%10.4f b=%10.4f\n",coef[1],coef[2]))
fit_ols <- coef[1]*sin(x)+coef[2]*cos(x)
par(cex=1.25)
plot(x,fit_ols,type="l",lty=1,lwd=4,col="red")
points(x,y,lwd=2)
detach(data)
Taylor <- function(x, n) {
taylor <- 0
for (i in 0:n) {
taylor <- taylor + (-1)^i * (x^(2*i)/factorial(2*i))
}
return(taylor)
}
x <- seq(-4,4,by=0.05)
plot(x, cos(x), type = "l")
for (i in 1:3) {
a <- Taylor(x, i)
lines(x=x, y=a, col=i+1, lty=i+1)
}
legend(2.7,1, legend=c("n=1", "n=2","n=3"),lty=c(2,3,4), col=c(2,3,4))
setwd("D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 7")
rm(list = ls())
#1
A <- matrix(0, nrow = 4, ncol = 4); A
r <- 1:4
A[1, ] <- r; A[ , 4] <- rev(r)
#2
A <- matrix(1,3,3); A
B <- 2*matrix(1,3,2); B
C <- 3*matrix(1,2,3); C
cbind(A,B)
cbind(A,t(B))
cbind(A,C)
cbind(A,t(C))
rbind(A,C)
rbind(A,t(B))
#3
A <- matrix(c(1,2,3,4), 2, 2, byrow = TRUE); A
B <- matrix(c(3,4,-1,2), 2, 2, byrow = TRUE); B
A%*%B
A <- matrix(c(3,5,6,-2),2,2, byrow = TRUE); A
B <- matrix(c(-1,0,2,1),2,2,byrow = TRUE); B
2*A - 4*B
A <- c(1,3,5)
B <- matrix(c(2,-1,-1,0,7,-2), 3, 2, byrow = TRUE); B
A%*%B
#4
A <- matrix(c(1,1,2,1,-1,-3,-2,-5,1), 3, 3, byrow = TRUE); A
b <- c(1,0,4)
solve(A, b)
#5
#6
library(Ryacas)
yac("A:={{0,1,s},{s,0,1},{1,s,0}}")
yac("Determinant(A)")
a <- NULL
for(i in 1:4) {
s <- (i-1)*(pi/4)
a[i] <- s^3 + 1
}
a
i <- 1:4
s <- (i-1)*(pi/4)
y <- s^3 + 1
library(pracma)
a <- polyfit(s,y,3); a
y <- polyval(p=a, x=1:100)
plot(y, type = "l")
#7
A <- matrix(c(1,0,0,-1,0,1,0,0,0,0,1,0,-1,0,0,1), 4,4); A
ev <- eigen(A)
V <- ev$vectors; V
lambda <- ev$values; lambda
av <- vector(mode = "list", length = 4)
lv <- vector(mode = "list", length = 4)
for (i in 1:4) {
av[[i]] <- A%*%V[,i]
lv[[i]] <- lambda[i]%*%V[,i]
}
for (i in 1:4) {
cat(sprintf("A*v_%d  lambda_%d*v_%d", i,i,i), "\n")
cat(sprintf("%2.5f %2.5f", av[[i]][1], lv[[i]][1]), "\n")
cat(sprintf("%2.5f %2.5f", av[[i]][2], lv[[i]][2]), "\n")
cat(sprintf("%2.5f %2.5f", av[[i]][3], lv[[i]][3]), "\n")
cat(sprintf("%2.5f %2.5f", av[[i]][4], lv[[i]][4]), "\n")
}
for (i in 1:4) {
cat(sprintf("A*v_%d  lambda_%d*v_%d", i,i,i), "\n")
for (j in 1:4) {
cat(sprintf("%2.5f %2.5f", av[[i]][j], lv[[i]][j]), "\n")
}
}
#8
rm(list = ls())
cat("\f")
library(pracma)
f <- function(x){
(x-1)*(x-3/2)*(x-2)
}
xm3 <- 1.9      # initialise the three x-variables
xm2 <- 1.8
xm1 <- 1.7
while(abs(xm1-xm2)>0.001 && iter<20){  # stopping rule
iter <- iter+1
fxm3 <- f(xm3)   #f(x_{i-3})
fxm2 <- f(xm2)   #f(x_{i-2})
fxm1 <- f(xm1)   #f(x_{i-1})
x <- c(xm3,xm2,xm1)
y <- c(fxm3,fxm2,fxm1)
coef <- polyfit(x,y,2)       # fit a quadratic polynomial
roots <- roots(coef)         # determine roots
differ <- abs(roots-xm1)     # difference between roots and xm1
index <- which.min(differ)   # determine the closest root
xm3 <- xm2                   # update values
xm2 <- xm1
xm1 <- roots[index]
cat(sprintf('Iteratie %d: approx. root = %.5f\n',iter,xm1))   # show new values
}
rm(list = ls())
cat("\f")
library(pracma)
f <- function(x){
(x-1)*(x-3/2)*(x-2)
}
xm3 <- 1.9      # initialise the three x-variables
xm2 <- 1.8
xm1 <- 1.7
iter <- 0
while(abs(xm1-xm2)>0.001 && iter<20){  # stopping rule
iter <- iter+1
fxm3 <- f(xm3)   #f(x_{i-3})
fxm2 <- f(xm2)   #f(x_{i-2})
fxm1 <- f(xm1)   #f(x_{i-1})
x <- c(xm3,xm2,xm1)
y <- c(fxm3,fxm2,fxm1)
coef <- polyfit(x,y,2)       # fit a quadratic polynomial
roots <- roots(coef)         # determine roots
differ <- abs(roots-xm1)     # difference between roots and xm1
index <- which.min(differ)   # determine the closest root
xm3 <- xm2                   # update values
xm2 <- xm1
xm1 <- roots[index]
cat(sprintf('Iteratie %d: approx. root = %.5f\n',iter,xm1))   # show new values
}

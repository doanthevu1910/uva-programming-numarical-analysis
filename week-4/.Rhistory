rm(list = ls())
Armstrong <- function(x){
if(x%%10==0) return(FALSE)
else {
tmp <- x
count <- 0
while (tmp>0) {
count <- count + 1
tmp <- tmp%%10
}
tmp <- x
sum <- 0
while (tmp>0) {
sum <- sum + (tmp%%10)^count
tmp <- tmp%%10
}
if (som==x) return(TRUE)
else return(FALSE)
}
}
Armstrong(x = 153)
rm(list = ls())
Armstrong <- function(x){
if(x%%10==0) return(FALSE)
else {
tmp <- x
count <- 0
while (tmp>0) {
count <- count + 1
tmp <- tmp%%10
}
tmp <- x
sum <- 0
while (tmp>0) {
sum <- sum + (tmp%%10)^count
tmp <- tmp%%10
}
if (som==x) return(TRUE)
else return(FALSE)
}
}
Armstrong(x = 153)
x <- 153
Armstrong <- function(x){
if(x%%10==0) return(FALSE)
else {
tmp <- x
count <- 0
while (tmp>0) {
count <- count + 1
tmp <- tmp%%10
}
tmp <- x
sum <- 0
while (tmp>0) {
sum <- sum + (tmp%%10)^count
tmp <- tmp%%10
}
if (som==x) return(TRUE)
else return(FALSE)
}
}
Armstrong(x)
heights <- c(69,58)
names(heights) <- c("x","y")
heights
rm(list = ls())
library(ggplot2)
library(ggplot)
install.packages(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
maxint
.Machine$integer.max
rm(list = ls())
setwd("D:/UvA/Year 1/Block 5/Programming and Numerical Analysis/Week 4")
rm(list = ls())
install.packages("spuRs")
library(spuRs)
library(spuRs)
for (i in 1:4) {
sum <- 0
for (j in 1:(i+1)) {
sum <- sum + j^i
}
cat(sprintf("Sum for p = %d is %d", i, sum)); cat("\n")
}
Sum <- function(p) {
sum <- 0
for (j in 1:(p+1)) {
sum <- sum + j^p
}
return(sum)
}
for (i in 1:4) {
cat(sprintf("Sum for p = %d is %d", i, Sum(i))); cat("\n")
}
D(expression(acos(1/2*sin(x))), "x")
dg1x<-function(x){
-(1/2 * cos(x)/sqrt(1 - (1/2 * sin(x))^2))
}
D(expression(asin(2*cos(x))), "x")
dg2x <- function(x){
-(2 * sin(x)/sqrt(1 - (2 * cos(x))^2))
}
x<-seq(-2*pi,2*pi,length=1e3)
plot(x=x)
plot(x=x, y=dg1x(x))
lines(y=x)
lines(x=x, y=x)
#1
g1 <- function(x) {
acos(1/2*sin(x))
}
g2 <- function(x) {
asin(2*cos(x))
}
plot(x=x, y=dg1x(x), ylim = -10:10)
plot(x=x, y=dg1x(x), ylim = c(-10,10))
lines(x=x, y=dg2x(x))
abline(h=-1)
abline(h=1)
plot(x=x, y=g1(x), xlim = c(-6,6), ylim = c(-6,6))
lines(x=x, y=x)
plot(x=x, y=g1(x), xlim = c(1,1.2), ylim = c(1,1.2))
lines(x=x, y=x)
?fixedpoint
fixedpoint(2*cos(x)-sin(x), x0=1)
fixedpoint(ftn=2*cos(x)-sin(x), x0=1)
fixedpoint(g1, x0=1)
f <- function(x){
return(exp(-x)-x)
}
plot(type="l",x,y=g1(x),xlim = c(1,1.2),ylim = c(1,1.2))
abline(a=0,b=1,col=4,lwd=3)
fixedpoint <- function(g1, x0=-5, tol = 1e-9, max.iter = 100) {
xold <- x0
xnew <- g1(xold)
iter <- 1
cat("At iteration 1 value of x is:", xnew, "\n")
while ((abs(xnew-xold) > tol) && (iter < max.iter)) {
xold <- xnew;
xnew <- g1(xold);
iter <- iter + 1
cat("At iteration", iter, "value of x is:", xnew, "\n")
}
if (abs(xnew-xold) > tol) {
cat("Algorithm failed to converge\n")
return(NULL)
} else {
cat("Algorithm converged\n")
return(xnew)
}
}
fixedpoint(-5)
fixedpoint(g1, x0=-5)
?bisection
bisection(g1, -2*pi, 2*pi)
bisection(g1, -2*pi, 0)
bisection(g1,0,1)
g1(1)
g1(-2*pi)
g1(2*pi)
g1(0)
g1(x)
plot(g1(x))
?bisection
ftn5 <- function(x) return(log(x)-exp(-x))
bisection(ftn5, 1, 2, tol = 1e-6)
plot(ftn5(x))
f <- function(x) {
(x^3-x)*sin(x)
}
D(expression((x^3-x)*sin(x)), "x")
dfx <- function(x) {
(3 * x^2 - 1) * sin(x) + (x^3 - x) * cos(x)
}
fNR <- function(x) {
return(c(f(x), dfx(x)))
}
x0 <- 0:3
x0 <- (-3:3)
root <- rep(NA, length(x0))
?newtonraphson
dfx <- function(x) {
D(expression((x^3-x)*sin(x)), "x")
}
dfx(3)
dfx(3)
uniroot.all(dfx, c(-4,4))
newtonraphson(f, x0)
for (i in 1:length(x0)) {
root[i] <- newtonraphson(f, x0[i])
}
length(x0)
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i])
}
for (i in 1:7) {
root[i] <- newtonraphson(f, x[i])
}
x0 <- (-3:3)
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i])
}
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i])
}
for (i in 1:7) {
root[i] <- newtonraphson(f, x0[i], tol=1e-9, max.iter = 100)
}
for (i in 1:7) {
root[i] <- newtonraphson(fNR, x0[i], tol=1e-9, max.iter = 100)
}
fNR <- function(x) {
return(c(f(x), dfx(x)))
}
for (i in 1:7) {
root[i] <- newtonraphson(fNR, x0[i], tol=1e-9, max.iter = 100)
}
f <- function(x) {
(x^3-x)*sin(x)
}
D(expression((x^3-x)*sin(x)), "x")
dfx <- function(x) {
(3 * x^2 - 1) * sin(x) + (x^3 - x) * cos(x)
}
fNR <- function(x) {
return(c(f(x), dfx(x)))
}
for (i in 1:7) {
root[i] <- newtonraphson(fNR, x0[i], tol=1e-9, max.iter = 100)
}
root
for (i in 1:7) {
cat(sprintf("x0=%d: Root=%.5f found", x0[i], root[i]))
}
for (i in 1:7) {
cat(sprintf("x0=%d: Root=%.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%3d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%2d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
for (i in 1:7) {
cat(sprintf("x0=%3d: Root=%3.5f found", x0[i], root[i])); cat("\n")
}
x<-0:3
Taylor <- function(x, n) {
taylor <- 0
for (i in 0:n) {
taylor <- taylor + (-1)^i * (x^(2*i)/factorial(2*i))
}
return(taylor)
}
cat("x:"); cat(sprintf("%7.8f", 0:3))
cat("cos(x):") ; cat(sprintf("%7.8f %7.8f %7.8f %7.8f", cos(0), cos(1), cos(2), cos(3)))
cat("N=1:"); cat(sprintf("%7.8f %7.8f %7.8f %7.8f", Taylor(0,1), Taylor(1,1), Taylor(2,1), Taylor(3,1)))
cat("N=2:"); cat(sprintf("%7.8f %7.8f %7.8f %7.8f", Taylor(0,2), Taylor(1,2), Taylor(2,2), Taylor(3,2)))
cat("N=3:"); cat(sprintf("%7.8f %7.8f %7.8f %7.8f", Taylor(0,3), Taylor(1,3), Taylor(2,3), Taylor(3,3)))
?roots
??roots
#rm(list = ls()) # clear memory
#cat("\f")       # clear screen
library(pracma)
rm(list = ls())
cat("\f")
library(pracma)
f <- function(x){
(x-1)*(x-3/2)*(x-2)
}
xm3 <- 1.9      # initialise the three x-variables
xm2 <- 1.8
xm1 <- 1.7
iter <- 0
?roots
rm(list = ls())
f <- function(x) {
return(x/(1+x^2))
}
g <- function(x) {
return(tan(x))
}
x <- seq(-pi/2,pi/2, length.out = 100)
r1 <- f(g(x))
r2 <- g(f(x))
library(ggplot2)
ggplot() +
geom_line(mapping = aes(x=x, y=r1), col="blue", linetype=2) +
geom_line(mapping = aes(x=x,y=r2), col="red", linetype=3) +
ylab("")
#3
x <- seq(-4,4,by=0.05)
plot(x, cos(x), type = "l")
for (i in 1:3) {
a <- Taylor(x, i)
lines(x=x, y=a, col=i+1, lty=i+1)
}
Taylor <- function(x, n) {
taylor <- 0
for (i in 0:n) {
taylor <- taylor + (-1)^i * (x^(2*i)/factorial(2*i))
}
return(taylor)
}
for (i in 1:3) {
a <- Taylor(x, i)
lines(x=x, y=a, col=i+1, lty=i+1)
}
legend(2.7,1, legend=c("n=1", "n=2","n=3"),lty=c(2,3,4), col=c(2,3,4))
Sum <- function(p) {
sum <- 0
for (j in 1:(p+1)) {
sum <- sum + j^p
}
return(sum)
}
for (i in 1:4) {
cat(sprintf("Sum for p = %d is %d", i, Sum(i))); cat("\n")
}
for (i in 1:4) {
sum <- 0
for (j in 1:(i+1)) {
sum <- sum + j^i
}
cat(sprintf("Sum for p = %d is %d", i, sum)); cat("\n")
}
